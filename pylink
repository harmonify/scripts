#!/usr/bin/env python

from __future__ import annotations
from typing import Any, List
import sys
import os
import shutil


def main(args: list[str]) -> None:
    try:
        if len(args) < 1:
            raise Exception('No arguments provided.')
        if args[0].startswith('-'):
            switch(args[0], *args[1:])
        elif args[-1].startswith('-'):
            switch(args[-1], *args[:-1])
        else:
            mklink(source=args[0], destination=args[1]
                   if len(args) > 1 else "")
        exit(0)
    except KeyboardInterrupt:
        print("Exiting...")
        exit(0)
    except Exception as e:
        print(e)
        exit(1)


def switch(s: str, *args: Any) -> None:
    """ Map the switch to the corresponding function and execute it. """
    switches = {
        "-h": help,
        "--help": help,
        "-f": mklink_force,
        "--force": mklink_force,
    }

    if s in switches:
        switches[s](*args)
    else:
        raise Exception(f"Unknown switch: {s}. Use -h or --help for help.")


def mklink(source: str = "", destination: str = "") -> None:
    """
    Creates a symbolic link from source to destination.
    """
    source_path, destination_path = parsePath(source, destination)
    # perform general checks
    _mklink_check(source, destination, source_path)
    # check if the destination exists and throw an error if it does
    if os.path.exists(destination_path):
        raise Exception(f'{destination_path} already exists.')
    # create the link
    _mklink(source_path, destination_path)


def mklink_force(source: str = "", destination: str = "") -> None:
    """
    Creates a symbolic link from source to destination
    and overwrites the destination if it already exists.
    """
    source_path, destination_path = parsePath(source, destination)
    # perform general checks
    _mklink_check(source, destination, source_path)
    # check if the destination exists and remove it if it does
    if os.path.exists(destination_path):
        print(f'Deleting {destination_path}')
        if os.path.isdir(destination_path):
            shutil.rmtree(destination_path)
        else:
            os.remove(destination_path)
    # create the link
    _mklink(source_path, destination_path)


def _mklink_check(source: str, destination: str, source_path: str) -> None:
    """
    Perform general checks for `mklink` and `mklink_force`.
    """
    errors = []
    if source == "":
        errors.append("No source provided.")
    if destination == "":
        errors.append("No destination provided.")
    if not os.path.exists(source_path):
        errors.append(f"Source {source_path} does not exist.")
    if len(errors) > 0:
        raise Exception(f"\n".join(errors))


def _mklink(source_path: str, destination_path: str) -> None:
    """
    Creates a symbolic link from source path to destination path.
    Note: This function is used internally by mklink and mklink_force.
    It is not meant to be used directly.
    """
    if os.path.isfile(source_path):
        # if the destination directory didn't exist, create it
        if not os.path.exists(os.path.dirname(destination_path)):
            os.makedirs(os.path.dirname(destination_path), exist_ok=True)
    print(f'Creating symbolic link on {destination_path}')
    os.symlink(source_path, destination_path)


def parsePath(*args: Any) -> str | List[str]:
    """
    Parse one or multiple paths.
    """
    return [os.path.abspath(arg) for arg in args]


def help(*args: Any, **kwargs: Any) -> None:
    """ Print help information and exit. """
    print("""
===============================================================

pylink - a python util to create symbolic links

===============================================================

Usage:
    python pylink [options] [source] [destination] ...

Options:
    -h, --help
        Print this help message and exit.
    -f, --force
        Overwrite existing files.

Description:
    This script creates a symbolic link between two files using
    Python's `os.symlink` function.
    https://docs.python.org/3/library/os.html#os.symlink

    For Windows, this script require Administrator privileges.
    You can run this script by:
    * Opening the shell with `Run as administrator` option.
    * Running `wsudo.bat` batch file.
        e.g. `wsudo.bat python pylink.py file1 file2`

Examples:
    python pylink file1 file2
        Create a symbolic link from file1 to file2.

    python pylink dir1/ dir2/
        Create a symbolic link from dir1 to dir2.

    python pylink -f file1 file2
        Create a symbolic link from file1 to file2. If the
        destination already exists, it is overwritten.

    python pylink -h
        Print this help message and exit.
""")


if __name__ == '__main__':
    # location of the current script directory
    __location__ = os.path.realpath(
        os.path.join(os.getcwd(), os.path.dirname(__file__)))

    # sys.argv[0] is the name of the script
    # sys.argv[1:] is the list of arguments
    main(sys.argv[1:])
